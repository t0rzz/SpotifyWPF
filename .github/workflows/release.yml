name: Release

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'SpotifyWPF/SpotifyWPF.csproj'
      - 'SpotifyWPF/app.manifest'
      - 'SpotifyWPF.MSIX/Package.appxmanifest'
      - '.github/workflows/release.yml'
      - 'SpotifyWPF.MSIX/SpotifyWPF.MSIX.wapproj'
      - 'SpotifyWPF.macOS.native/**'
      - 'CHANGELOG.md'
      - 'README.md'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-windows:
    name: Build Windows
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Extract version
        id: version
        run: |
          $csproj = Get-Content './SpotifyWPF/SpotifyWPF.csproj'
          $m = Select-String -InputObject $csproj -Pattern '<Version>([^<]+)</Version>' -AllMatches
          if (-not $m.Matches.Success) { Write-Error 'Version element not found in csproj.' }
          $version = $m.Matches[0].Groups[1].Value.Trim()
          echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "TAG=v$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "Detected version: $version"
        shell: pwsh

      - name: Restore
        run: dotnet restore .\SpotifyWPF.sln
        shell: pwsh

      - name: Build (Release)
        run: dotnet build .\SpotifyWPF\SpotifyWPF.csproj -c Release --no-restore
        shell: pwsh

      - name: Create ZIP of Release binaries
        run: |
          $zipName = "SpotifyWPF-${env:VERSION}.zip"
          $src = "${{ github.workspace }}\SpotifyWPF\bin\Release\net8.0-windows\*"
          $dst = "${{ github.workspace }}\$zipName"
          If (Test-Path $dst) { Remove-Item $dst -Force }
          If (Test-Path $src) {
            Compress-Archive -Path $src -DestinationPath $dst -Force
            Write-Host "Created archive: $dst"
          } Else {
            Write-Host "Warning: Release binaries not found at $src"
            Get-ChildItem "${{ github.workspace }}\SpotifyWPF\bin\Release\" -Recurse | Where-Object { $_.PSIsContainer } | Select-Object FullName
          }
        shell: pwsh

      - name: Build portable single-file EXE (win-x64)
        run: |
          $out = "${{ github.workspace }}\artifacts\portable\win-x64"
          dotnet publish .\SpotifyWPF\SpotifyWPF.csproj -c Release -r win-x64 -p:PublishSingleFile=true -p:SelfContained=true -p:IncludeNativeLibrariesForSelfExtract=true -p:DebugType=None -p:DebugSymbols=false -o $out
          $exe = Join-Path $out 'SpotifyWPF.exe'
          $dest = "${{ github.workspace }}\SpotifyWPF-$env:VERSION-portable-win-x64.exe"
          Copy-Item $exe $dest -Force
          Write-Host "Portable EXE: $dest"
        shell: pwsh

      - name: Build MSIX (unsigned) via WAP project
        run: |
          $out = "${{ github.workspace }}\artifacts\msix"
          New-Item -ItemType Directory -Force -Path $out | Out-Null
          msbuild .\SpotifyWPF.MSIX\SpotifyWPF.MSIX.wapproj /t:Restore,Rebuild /p:Configuration=Release `
            /p:UapAppxPackageBuildMode=SideLoadOnly /p:AppxBundle=Never /p:AppxPackageSigningEnabled=false /p:AppxPackageDir="$out"
          $msix = Get-ChildItem $out -Filter *.msix -Recurse | Select-Object -First 1
          if (-not $msix) { Write-Error 'MSIX package not found.' }
          $dest = "${{ github.workspace }}\SpotifyWPF-$env:VERSION.msix"
          Copy-Item $msix.FullName $dest -Force
          Write-Host "MSIX: $dest"
        shell: pwsh

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: |
            ${{ github.workspace }}\SpotifyWPF-${{ env.VERSION }}.zip
            ${{ github.workspace }}\SpotifyWPF-${{ env.VERSION }}-portable-win-x64.exe
            ${{ github.workspace }}\SpotifyWPF-${{ env.VERSION }}.msix

  build-macos:
    name: Build macOS
    runs-on: macos-12

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Extract version
        id: version
        run: |
          if [ -f "./SpotifyWPF.macOS.native/SpotifyWPF.xcodeproj/project.pbxproj" ]; then
            # Try to extract version from Xcode project
            VERSION=$(grep -o 'MARKETING_VERSION = [0-9.]*' "./SpotifyWPF.macOS.native/SpotifyWPF.xcodeproj/project.pbxproj" | head -1 | cut -d' ' -f3)
            if [ -z "$VERSION" ]; then
              # Fallback to csproj version if Xcode version not found
              if [ -f "../SpotifyWPF/SpotifyWPF.csproj" ]; then
                VERSION=$(grep -o '<Version>[^<]*' ../SpotifyWPF/SpotifyWPF.csproj | head -1 | sed 's/<Version>//')
              else
                VERSION="1.0.0"
              fi
            fi
          else
            VERSION="1.0.0"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAG=v$VERSION" >> $GITHUB_ENV
          echo "Detected macOS version: $VERSION"

      - name: Build macOS app
        run: |
          cd SpotifyWPF.macOS.native
          chmod +x build_dmg.sh
          ./build_dmg.sh

      - name: Rename DMG with version
        run: |
          cd SpotifyWPF.macOS.native
          if [ -f "SpotifyWPF.dmg" ]; then
            mv SpotifyWPF.dmg "../SpotifyWPF-${{ env.VERSION }}-macOS.dmg"
          fi

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: |
            SpotifyWPF-${{ env.VERSION }}-macOS.dmg

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-artifacts

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-artifacts

      - name: Extract version for release
        run: |
          # Get version from Windows build (assuming same version)
          VERSION="1.0.0"  # Default fallback
          if [ -f "SpotifyWPF/SpotifyWPF.csproj" ]; then
            VERSION=$(grep -o '<Version>[^<]*' SpotifyWPF/SpotifyWPF.csproj | head -1 | sed 's/<Version>//')
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAG=v$VERSION" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG }}
          target_commitish: ${{ github.sha }}
          name: SpotifyWPF v${{ env.VERSION }}
          generate_release_notes: true
          draft: false
          prerelease: false
          files: |
            SpotifyWPF-${{ env.VERSION }}.zip
            SpotifyWPF-${{ env.VERSION }}-portable-win-x64.exe
            SpotifyWPF-${{ env.VERSION }}.msix
            SpotifyWPF-${{ env.VERSION }}-macOS.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

