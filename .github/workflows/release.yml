name: Release

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'SpotifyWPF/SpotifyWPF.csproj'
      - 'SpotifyWPF/app.manifest'
      - 'SpotifyWPF.MSIX/Package.appxmanifest'
      - '.github/workflows/release.yml'

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build and create GitHub Release
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Ensure MSIX tooling (UWP workload + MSIX Packaging Tools)
        run: |
          $vsInstaller = Join-Path "$env:ProgramFiles(x86)" 'Microsoft Visual Studio\Installer\vs_installer.exe'
          $vsWhere = Join-Path "$env:ProgramFiles(x86)" 'Microsoft Visual Studio\Installer\vswhere.exe'
          if (-not (Test-Path $vsInstaller)) { Write-Error "vs_installer.exe not found." }
          if (-not (Test-Path $vsWhere)) { Write-Error "vswhere.exe not found." }
          $installPath = & $vsWhere -latest -products * -property installationPath
          if (-not $installPath) { Write-Error "Visual Studio installation not found." }
          Write-Host "VS installation: $installPath"
          $args = @(
            'modify',
            "--installPath", "$installPath",
            '--add', 'Microsoft.VisualStudio.Workload.Universal',
            '--add', 'Microsoft.VisualStudio.ComponentGroup.MSIX.PackagingTool',
            '--includeRecommended',
            '--passive', '--norestart'
          )
          $p = Start-Process -FilePath $vsInstaller -ArgumentList $args -NoNewWindow -Wait -PassThru
          Write-Host "VS Installer exited with code $($p.ExitCode)"
          if ($p.ExitCode -ne 0 -and $p.ExitCode -ne 3010) { throw "VS Installer failed: $($p.ExitCode)" }
        shell: pwsh

      - name: Extract version
        id: version
        run: |
          $csproj = Get-Content './SpotifyWPF/SpotifyWPF.csproj'
          $m = Select-String -InputObject $csproj -Pattern '<Version>([^<]+)</Version>' -AllMatches
          if (-not $m.Matches.Success) { Write-Error 'Version element not found in csproj.' }
          $version = $m.Matches[0].Groups[1].Value.Trim()
          echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "TAG=v$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "tag=v$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          Write-Host "Detected version: $version"
        shell: pwsh

      - name: Restore
        run: dotnet restore .\SpotifyWPF.sln
        shell: pwsh

      - name: Build (Release)
        run: dotnet build .\SpotifyWPF\SpotifyWPF.csproj -c Release --no-restore
        shell: pwsh

      - name: Create ZIP of Release binaries
        run: |
          $zipName = "SpotifyWPF-$env:VERSION.zip"
          $src = "${{ github.workspace }}\SpotifyWPF\bin\Release\net8.0-windows\*"
          $dst = "${{ github.workspace }}\$zipName"
          If (Test-Path $dst) { Remove-Item $dst -Force }
          Compress-Archive -Path $src -DestinationPath $dst -Force
          Write-Host "Created archive: $dst"
        shell: pwsh

      - name: Build portable single-file EXE (win-x64)
        run: |
          $out = "${{ github.workspace }}\artifacts\portable\win-x64"
          dotnet publish .\SpotifyWPF\SpotifyWPF.csproj -c Release -r win-x64 -p:PublishSingleFile=true -p:SelfContained=true -p:IncludeNativeLibrariesForSelfExtract=true -p:DebugType=None -p:DebugSymbols=false -o $out
          $exe = Join-Path $out 'SpotifyWPF.exe'
          $dest = "${{ github.workspace }}\SpotifyWPF-$env:VERSION-portable-win-x64.exe"
          Copy-Item $exe $dest -Force
          Write-Host "Portable EXE: $dest"
        shell: pwsh

      - name: Build MSIX (unsigned) via WAP project
        id: msix
        run: |
          $out = "${{ github.workspace }}\artifacts\msix"
          New-Item -ItemType Directory -Force -Path $out | Out-Null
          # Build WAP and force packaging output
          msbuild .\SpotifyWPF.MSIX\SpotifyWPF.MSIX.wapproj /t:Restore,Rebuild /p:Configuration=Release /p:Platform=x64 `
            /p:GenerateAppxPackageOnBuild=true /p:UapAppxPackageBuildMode=SideLoadOnly /p:AppxBundle=Never `
            /p:AppxPackageSigningEnabled=false /p:AppxSymbolPackageEnabled=false /p:AppxPackageDir="$out"
          # Look for package in explicit out dir first
          $msix = Get-ChildItem $out -Include *.msix,*.appx,*.msixbundle -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
          if (-not $msix) {
            # Fallback to default AppPackages folder inside the project
            $fallback = Join-Path "${{ github.workspace }}" 'SpotifyWPF.MSIX\AppPackages'
            if (Test-Path $fallback) {
              $msix = Get-ChildItem $fallback -Include *.msix,*.appx,*.msixbundle -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
            }
          }
          if (-not $msix) {
            Write-Host '--- Diagnostics: listing output dirs ---'
            Get-ChildItem $out -Recurse -ErrorAction SilentlyContinue | Format-List -Property FullName,Length,LastWriteTime | Out-String | Write-Host
            if (Test-Path $fallback) { Get-ChildItem $fallback -Recurse | Format-List -Property FullName,Length,LastWriteTime | Out-String | Write-Host }
            Write-Error 'MSIX package not found.'
          }
          $dest = "${{ github.workspace }}\SpotifyWPF-$env:VERSION$($msix.Extension)"
          Copy-Item $msix.FullName $dest -Force
          "MSIX_PATH=$dest" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          Write-Host "MSIX: $dest"
        shell: pwsh

      - name: Upload ZIP and portable EXE
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            ${{ github.workspace }}\SpotifyWPF-${{ steps.version.outputs.version }}.zip
            ${{ github.workspace }}\SpotifyWPF-${{ steps.version.outputs.version }}-portable-win-x64.exe

      - name: Upload MSIX artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: release-msix
          path: ${{ steps.msix.outputs.MSIX_PATH }}

      - name: Create GitHub Release (zip + exe)
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          target_commitish: ${{ github.sha }}
          name: SpotifyWPF v${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          files: |
            SpotifyWPF-${{ steps.version.outputs.version }}.zip
            SpotifyWPF-${{ steps.version.outputs.version }}-portable-win-x64.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Attach MSIX to Release (if present)
        if: ${{ steps.msix.outputs.MSIX_PATH != '' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          files: ${{ steps.msix.outputs.MSIX_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
