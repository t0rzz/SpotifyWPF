<UserControl x:Class="SpotifyWPF.View.Page.PlaylistsPage"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:ext="clr-namespace:SpotifyWPF.View.Extension"
             mc:Ignorable="d"
             DataContext="{Binding PlaylistsPage, Source={StaticResource Locator}}"    
             d:DesignHeight="450" d:DesignWidth="800">

    <UserControl.Resources>
        <ContextMenu x:Key="PlaylistsContextMenu" Background="{DynamicResource CardBrush}" BorderBrush="{DynamicResource ControlBorderBrush}" BorderThickness="1" Padding="4" OverridesDefaultStyle="True" FocusVisualStyle="{x:Null}">
            <ContextMenu.Template>
                <ControlTemplate TargetType="ContextMenu">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="True">
                        <ItemsPresenter />
                    </Border>
                </ControlTemplate>
            </ContextMenu.Template>
            <ContextMenu.Resources>
                <!-- Keyed style to avoid merging with any implicit/global MenuItem style -->
                <Style x:Key="MenuItemPlain" TargetType="MenuItem" BasedOn="{x:Null}">
                    <Setter Property="OverridesDefaultStyle" Value="True"/>
                    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="Foreground" Value="{DynamicResource ControlForegroundBrush}"/>
                    <Setter Property="Padding" Value="8,6"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="MenuItem">
                                <Border x:Name="Border" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                                    <ContentPresenter ContentSource="Header"
                                                      RecognizesAccessKey="True"
                                                      VerticalAlignment="Center"
                                                      TextBlock.Foreground="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsHighlighted" Value="True">
                                        <Setter TargetName="Border" Property="Background" Value="{DynamicResource ControlHighlightBrush}"/>
                                        <Setter Property="Foreground" Value="{DynamicResource ControlHighlightForegroundBrush}"/>
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="Opacity" Value="0.6"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
                <!-- Implicit style so only MenuItem gets the template; Separator is unaffected -->
                <Style TargetType="MenuItem" BasedOn="{StaticResource MenuItemPlain}"/>
            </ContextMenu.Resources>
            <!-- Removed ItemContainerStyle to avoid applying a MenuItem style to Separator -->

            <!-- Items -->
            <MenuItem Header="Load Tracks"
                      Command="{Binding PlacementTarget.Tag.LoadTracksCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                      CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}"/>
            <Separator/>
            <MenuItem Header="Open in Spotify"
                      Command="{Binding PlacementTarget.Tag.OpenInSpotifyCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                      CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}"/>
            <MenuItem Header="Copy Link"
                      Command="{Binding PlacementTarget.Tag.CopyPlaylistLinkCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                      CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}"/>
            <Separator/>
            <MenuItem Header="Unfollow (Delete)"
                      Foreground="{DynamicResource DangerBrush}"
                      Command="{Binding PlacementTarget.Tag.UnfollowPlaylistCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                      CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}"/>
        </ContextMenu>
    </UserControl.Resources>

    <UserControl.InputBindings>
        <KeyBinding Key="F5" Command="{Binding LoadPlaylistsCommand}" />
    </UserControl.InputBindings>

    <DockPanel LastChildFill="True">
        <StackPanel DockPanel.Dock="Top" Orientation="Horizontal" Margin="8,8,8,0">
            <Button Content="Start" Command="{Binding StartLoadPlaylistsCommand}" IsEnabled="{Binding CanStart}" Margin="0,0,8,0"/>
            <Button Content="Stop" Command="{Binding StopLoadPlaylistsCommand}" IsEnabled="{Binding CanStop}"/>
        </StackPanel>
        <StatusBar DockPanel.Dock="Bottom">
            <StatusBar.ItemsPanel>
                <ItemsPanelTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                    </Grid>
                </ItemsPanelTemplate>
            </StatusBar.ItemsPanel>
            <StatusBarItem>
                <TextBlock Text="{Binding Status}"/>
            </StatusBarItem>
            <StatusBarItem Grid.Column="1" HorizontalContentAlignment="Stretch">
                <ProgressBar IsIndeterminate="True" Visibility="{Binding ProgressVisibility}"/>
            </StatusBarItem>
        </StatusBar>

        <TextBox DockPanel.Dock="Bottom"
                 Height="120"
                 Margin="8,8,8,8"
                 IsReadOnly="True"
                 VerticalScrollBarVisibility="Auto"
                 HorizontalScrollBarVisibility="Auto"
                 Text="{Binding OutputLog}"
                 FontFamily="Consolas"
                 TextWrapping="NoWrap"
                 Background="{DynamicResource CardBrush}"
                 BorderBrush="{DynamicResource ControlBorderBrush}"
                 BorderThickness="1"
                 ext:TextBoxExtensions.AutoScrollToEnd="True" />

        <Grid Margin="6">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <GroupBox Header="Playlists">
                <DataGrid x:Name="PlaylistsDataGrid" ItemsSource="{Binding Playlists}" AutoGenerateColumns="False" CanUserAddRows="False">
                    <DataGrid.InputBindings>
                        <MouseBinding Gesture="LeftDoubleClick"
                                      Command="{Binding LoadTracksCommand}"
                                      CommandParameter="{Binding ElementName=PlaylistsDataGrid, Path=SelectedItem}"/>
                        <KeyBinding Key="Delete"
                                    Command="{Binding DeletePlaylistsCommand}"
                                    CommandParameter="{Binding ElementName=PlaylistsDataGrid, Path=SelectedItems}"/>
                    </DataGrid.InputBindings>

                    <DataGrid.RowStyle>
                        <Style TargetType="DataGridRow">
                            <!-- Expose the page ViewModel via Tag so the ContextMenu can bind to it -->
                            <Setter Property="Tag" Value="{Binding DataContext, RelativeSource={RelativeSource AncestorType=DataGrid}}"/>
                            <Setter Property="ContextMenu" Value="{StaticResource PlaylistsContextMenu}"/>
                        </Style>
                    </DataGrid.RowStyle>

                    <DataGrid.Columns>
                        <DataGridTextColumn Header="Name" Binding="{Binding Name}" IsReadOnly="True" Width="2*"/>
                        <DataGridTextColumn Header="Created By" Binding="{Binding OwnerName}" IsReadOnly="True" Width="*"/>
                        <DataGridTextColumn Header="# Tracks" Binding="{Binding TracksTotal}" IsReadOnly="True" Width="*"/>
                    </DataGrid.Columns>
                </DataGrid>
            </GroupBox>

            <GroupBox Grid.Column="1" Header="Tracks">
                <DataGrid x:Name="TracksDataGrid" ItemsSource="{Binding Tracks}" AutoGenerateColumns="False" CanUserAddRows="False">
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="Name" Binding="{Binding TrackName}" IsReadOnly="True" Width="2*"/>
                        <DataGridTextColumn Header="Artist(s)" Binding="{Binding Artists}" IsReadOnly="True" Width="*"/>
                    </DataGrid.Columns>
                </DataGrid>
            </GroupBox>
        </Grid>
    </DockPanel>
</UserControl>
